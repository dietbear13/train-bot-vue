// src/routes/bot/sendWorkout.ts

import { Router, Request, Response } from 'express';
import { bot } from './botInstance';
import User from '../../models/User';
import { formatWeeklyWorkoutMessageHTML, escapeHTML } from '../../utils/helpers';

const router = Router();

const appUrl = process.env.APP_URL

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.
 */
interface Exercise {
    name: string;
    sets: number;
    reps: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.
 */
interface GeneratedDay {
    dayName: string;
    exercises: Exercise[];
    patternOrExercise?: string[];
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const sendWorkoutToUser = (
    chatId: number,
    splitName: string,
    splitComment: string | undefined,
    plan: GeneratedDay[]
) => {
    const message = formatWeeklyWorkoutMessageHTML(plan, splitName, splitComment);
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);

    bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
    })
        .then(() => {
            console.log(`–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
        })
        .catch((error: any) => {
            console.error('Error sending message to user:', error.response?.body || error.message);
        });
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const sendWorkoutsToUser = (
    chatId: number,
    muscleGroup: string,
    date: string,
    workout: { name: string; sets: number; reps: number }[]
) => {
    let message = `${muscleGroup}, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${date})\n\n`;
    message += '[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫](https://t.me/kochalkatg_bot)\n';
    message += '[–ö–∞–Ω–∞–ª –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤—å–µ](https://t.me/training_health)\n\n';
    workout.forEach((exercise, index) => {
        message += `${index + 1}. ${exercise.name} ‚Äî ${exercise.sets}√ó${exercise.reps}\n`;
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);

    bot
        .sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
        })
        .then(() => {
            console.log(`Workout sent to user ${chatId}`);
        })
        .catch((error) => {
            console.error('Error sending message to userAndAdmin:', error.response?.body || error.message);
        });
};

/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
router.post('/send-workout', async (req: Request, res: Response) => {
    const { userId, muscleGroup, date, workout } = req.body;

    if (!userId || !muscleGroup || !date || !workout || !Array.isArray(workout)) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId, muscleGroup, date –∏ workout (–º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π).' });
    }

    try {
        function capitalizeFirstLetter(str: string) {
            if (!str) return '';
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        let workoutMessage = `<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${escapeHTML(muscleGroup)}</b>\n–î–∞—Ç–∞: ${escapeHTML(date)}\n\n`;

        workout.forEach((exercise: Exercise, index: number) => {
            const externalUrl = `${appUrl}/landingsOutside/exerciseInChat?name=${encodeURIComponent(exercise.name)}`;
            workoutMessage += `${index + 1}. ${escapeHTML(capitalizeFirstLetter(exercise.name))} ‚Äî ${exercise.sets}√ó${exercise.reps} <a href="${externalUrl}">üîó</a>\n`;
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, workoutMessage, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });

        console.log(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        res.json({ message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.' });
    }
});

export default router;
