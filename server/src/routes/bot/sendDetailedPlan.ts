// src/routes/bot/sendDetailedPlan.ts

import { Router, Request, Response } from 'express';
import { bot, appUrl } from './botInstance';
import { formatWeeklyWorkoutMessageHTML, escapeHTML } from '../../utils/helpers';

const router = Router();

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.
 */
interface Exercise {
    name: string;
    sets: number;
    reps: number;
    dataUsed?: Record<string, any>;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.
 */
interface GeneratedDay {
    dayName: string;
    exercises: Exercise[];
    patternOrExercise?: string[];
}

/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (c splitName, splitComment, plan[])
 */
router.post('/send-detailed-plan', async (req: Request, res: Response) => {
    const { userId, plan, splitName, splitComment } = req.body;

    if (!userId || !plan || !Array.isArray(plan)) {
        return res.status(400).json({ message: '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å userId, plan (array of days), splitName –∏ splitComment.' });
    }

    if (!splitName || typeof splitName !== 'string') {
        return res.status(400).json({ message: '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å splitName (—Å—Ç—Ä–æ–∫–∞).' });
    }

    const validSplitComment = splitComment && typeof splitComment === 'string' ? splitComment : '';

    try {
        const messageHTML = formatWeeklyWorkoutMessageHTML(plan, splitName, splitComment);

        function capitalizeFirstLetter(str: string) {
            if (!str) return '';
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É-—Å—Å—ã–ª–∫—É –∫ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É tg://open-web-app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App –≤–Ω—É—Ç—Ä–∏ Telegram
        let detailedMessage = '';
        plan.forEach(day => {
            if (day.exercises && day.exercises.length > 0) {
                detailedMessage += `<u>${escapeHTML(day.dayName)}</u>\n`;
                day.exercises.forEach((exercise: Exercise, index: number) => {
                    const externalUrl = `${appUrl}/landingsOutside/exerciseInChat?name=${encodeURIComponent(exercise.name)}`;
                    detailedMessage += `${index + 1}. ${escapeHTML(capitalizeFirstLetter(exercise.name))} ‚Äî ${exercise.sets}√ó${exercise.reps} <a href="${externalUrl}">üîó</a>\n`;
                });
                detailedMessage += `\n`;
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        detailedMessage += `<a href="https://t.me/freeload_top_bot">–±–æ—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏</a>\n`;
        detailedMessage += `<a href="https://t.me/training_health">—Ç–≥-–∫–∞–Ω–∞–ª ¬´–∫–û—á–∞–ª–∫–∞¬ª</a>\n`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, detailedMessage, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });

        console.log(`–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        res.json({ message: '–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ Telegram:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ Telegram.', error: error.message });
    }
});

export default router;
