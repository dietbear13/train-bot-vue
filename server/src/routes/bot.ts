// routes/bot.ts

import { Router, Request, Response } from 'express';
import TelegramBot, { InlineKeyboardMarkup, InlineKeyboardButton } from 'node-telegram-bot-api';
import User from '../models/User';
import dotenv from 'dotenv';
dotenv.config();

const router = Router();

const botToken = process.env.TELEGRAM_BOT_TOKEN as string;
export const bot = new TelegramBot(botToken, { polling: false });

// IMPORTANT: URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∑ .env)
const appUrl = process.env.APP_URL;
if (!appUrl) {
    throw new Error('APP_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ .env');
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.
 */
interface Exercise {
    name: string;
    sets: number;
    reps: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.
 */
interface GeneratedDay {
    dayName: string;
    exercises: Exercise[];
    patternOrExercise?: string[];
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ /send-workout.
 */
interface SendWorkoutRequestBody {
    userId: number;
    splitName: string;
    splitComment?: string;
    plan: GeneratedDay[];
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ HTML.
 */
const escapeHTML = (text: string): string => {
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2, –Ω–æ –Ω–µ URL –≤ —Å—Å—ã–ª–∫–∞—Ö.
 */
const escapeMarkdownV2 = (text: string): string => {
    const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    const escapeRegex = new RegExp(`([${specialChars.map(char => '\\' + char).join('')}])`, 'g');
    return text.replace(escapeRegex, '\\$1');
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ.
 * –ò—Å–∫–ª—é—á–∞–µ—Ç –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞ (–≥–¥–µ exercises –ø—É—Å—Ç—ã).
 */
const formatWeeklyWorkoutMessageHTML = (
    plan: GeneratedDay[],
    splitName: string,
    splitComment?: string
): string => {
    let message = `<b>${escapeHTML(splitName)}</b>\n`;

    if (splitComment && splitComment.trim() !== '') {
        message += `<i>${escapeHTML(splitComment)}</i>\n\n`;
    } else {
        message += `\n`;
    }

    plan.forEach(day => {
        if (day.exercises && day.exercises.length > 0) {
            message += `<u>${escapeHTML(day.dayName)}</u>\n`;
            day.exercises.forEach((exercise, index) => {
                message += `${index + 1}. ${escapeHTML(exercise.name)} ‚Äî ${exercise.sets}√ó${exercise.reps} üîó\n`;
            });
            message += `\n`;
        }
    });

    message += `<a href="https://t.me/freeload_top_bot">–±–æ—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏</a>\n`;
    message += `<a href="https://t.me/training_health">—Ç–≥-–∫–∞–Ω–∞–ª ¬´–∫–û—á–∞–ª–∫–∞¬ª</a>\n`;

    return message;
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ) –≤ –∫–∞–Ω–∞–ª —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º MarkdownV2
 */
const sendPost = async (channelId: string, content: string, imageUrl?: string) => {
    try {
        const escapedContent = escapeMarkdownV2(content);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', escapedContent);

        if (imageUrl) {
            await bot.sendPhoto(channelId, imageUrl, {
                caption: escapedContent,
                parse_mode: 'MarkdownV2',
            });
            console.log(`–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channelId}`);
        } else {
            await bot.sendMessage(channelId, escapedContent, {
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });
            console.log(`–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${channelId}`);
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞:', error.response?.body || error.message);
        throw error;
    }
};

/**
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
 */
const schedulePost = (
    channelId: string,
    content: string,
    imageUrl: string | undefined,
    time: string
) => {
    const cron = require('node-cron');
    const moment = require('moment-timezone');
    const scheduledDate = moment(time);

    if (!scheduledDate.isValid()) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }

    // –ü—Ä–∏–º–µ—Ä: "0 10 23 3 *" => 23 –º–∞—Ä—Ç–∞ 10:00
    const cronTime = `${scheduledDate.minute()} ${scheduledDate.hour()} ${scheduledDate.date()} ${scheduledDate.month() + 1} *`;
    cron.schedule(cronTime, () => {
        sendPost(channelId, content, imageUrl).catch((err: any) => console.error(err));
    });

    console.log(`–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${scheduledDate.format('YYYY-MM-DD HH:mm')}`);
};

/**
 * –ú–∞—Ä—à—Ä—É—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª—É
 */
router.post('/check-bot-access', async (req: Request, res: Response) => {
    const { channelId } = req.body;
    if (!channelId) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å channelId' });
    }

    try {
        const botInfo = await bot.getMe();
        const chatMember = await bot.getChatMember(channelId, botInfo.id);
        const hasAccess = ['administrator', 'creator'].includes(chatMember.status);

        res.json({ hasAccess });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª—É:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞ –∫ –∫–∞–Ω–∞–ª—É', error: error.message });
    }
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
 */
router.get('/get-channels', async (req: Request, res: Response) => {
    try {
        // –ü—Ä–∏–º–µ—Ä: –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        const channels = [
            { id: '@training_health', title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ & –ó–¥–æ—Ä–æ–≤—å–µ' },
            // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        ];
        res.json({ channels });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤', error: error.message });
    }
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç: –ø—É–±–ª–∏–∫–∞—Ü–∏—è (–∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) –ø–æ—Å—Ç–∞
 */
router.post('/publish-post', async (req: Request, res: Response) => {
    const { channelId, postContent, imageUrl, publishNow, scheduledTime } = req.body;

    if (!channelId || !postContent) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å channelId –∏ postContent' });
    }

    try {
        if (publishNow) {
            await sendPost(channelId, postContent, imageUrl);
            res.json({ success: true, message: '–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' });
        } else {
            schedulePost(channelId, postContent, imageUrl, scheduledTime);
            res.json({ success: true, message: '–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω' });
        }
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞', error: error.message });
    }
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const sendWorkoutToUser = (
    chatId: number,
    splitName: string,
    splitComment: string | undefined,
    plan: GeneratedDay[]
) => {
    const message = formatWeeklyWorkoutMessageHTML(plan, splitName, splitComment);
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);

    bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
    })
        .then(() => {
            console.log(`–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
        })
        .catch((error: any) => {
            console.error('Error sending message to user:', error.response?.body || error.message);
        });
};


/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const sendWorkoutsToUser = (
    chatId: number,
    muscleGroup: string,
    date: string,
    workout: { name: string; sets: number; reps: number }[]
) => {
    let message = `${muscleGroup}, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (${date})\n\n`;
    message += '[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫](https://t.me/freeload_top_bot)\n';
    message += '[–ö–∞–Ω–∞–ª –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤—å–µ](https://t.me/training_health)\n\n';
    workout.forEach((exercise, index) => {
        message += `${index + 1}. ${exercise.name} ‚Äî ${exercise.sets}√ó${exercise.reps}\n`;
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);

    bot
        .sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
        })
        .then(() => {
            console.log(`Workout sent to user ${chatId}`);
        })
        .catch((error) => {
            console.error('Error sending message to userAndAdmin:', error.response?.body || error.message);
        });
};



/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
 */
router.post('/send-workout', async (req: Request, res: Response) => {
    const { userId, muscleGroup, date, workout } = req.body;

    if (!userId || !muscleGroup || !date || !workout || !Array.isArray(workout)) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId, muscleGroup, date –∏ workout (–º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π).' });
    }

    try {
        function capitalizeFirstLetter(str: string) {
            if (!str) return '';
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        let workoutMessage = `<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${escapeHTML(muscleGroup)}</b>\n–î–∞—Ç–∞: ${escapeHTML(date)}\n\n`;

        workout.forEach((exercise: Exercise, index: number) => {
            const externalUrl = `${appUrl}/landingsOutside/exerciseInChat?name=${encodeURIComponent(exercise.name)}`;
            workoutMessage += `${index + 1}. ${escapeHTML(capitalizeFirstLetter(exercise.name))} ‚Äî ${exercise.sets}√ó${exercise.reps} <a href="${externalUrl}">üîó</a>\n`;
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, workoutMessage, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });

        console.log(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        res.json({ message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.' });
    }
});

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ö–ë–ñ–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
const sendKbzhuResultToUser = (
    chatId: number,
    kbzhuResult: { calories: number; proteins: number; fats: number; carbs: number }
) => {
    let message = '–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—É—Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ö–ë–ñ–£:\n\n';
    message += `–ö–∞–ª–æ—Ä–∏–∏: ${kbzhuResult.calories} –∫–∫–∞–ª\n`;
    message += `–ë–µ–ª–∫–∏: ${kbzhuResult.proteins} –≥\n`;
    message += `–ñ–∏—Ä—ã: ${kbzhuResult.fats} –≥\n`;
    message += `–£–≥–ª–µ–≤–æ–¥—ã: ${kbzhuResult.carbs} –≥\n`;

    const escapedMessage = escapeMarkdownV2(message);

    bot.sendMessage(chatId, escapedMessage, {
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true,
    })
        .then(() => {
            console.log(`KbzhuResult sent to user ${chatId}`);
        })
        .catch((error: any) => {
            console.error('Error sending KbzhuResult to user:', error.response?.body || error.message);
        });
};

/**
 * –ú–∞—Ä—à—Ä—É—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ö–ë–ñ–£
 */
router.post('/send-kbzhu', async (req: Request, res: Response) => {
    const { userId, kbzhuResult } = req.body;
    if (!userId || !kbzhuResult) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏ kbzhuResult' });
    }

    try {
        sendKbzhuResultToUser(userId, kbzhuResult);
        res.json({ message: '–ö–ë–ñ–£ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram', error: error.message });
    }
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.
 */
router.post('/admin/log-exercises', async (req: Request, res: Response) => {
    const { userId, exercise } = req.body;
    if (!userId || !exercise) {
        return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å userId –∏ exercise' });
    }

    try {
        const user = await User.findOne({ telegramId: userId });
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        let message = `üîß –õ–æ–≥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n`;
        message += `–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${escapeMarkdownV2(exercise.name)}\n`;

        if (exercise.dataUsed && Object.keys(exercise.dataUsed).length > 0) {
            message += `*–î–æ–ø. –¥–∞–Ω–Ω—ã–µ:* ${escapeMarkdownV2(JSON.stringify(exercise.dataUsed))}\n`;
        }

        // ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminChatId = 327844310;
        await bot.sendMessage(adminChatId, message, {
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true,
        });

        console.log(`–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "${exercise.name}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.`);
        res.json({ message: '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.' });
    }
});

/**
 * –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (c splitName, splitComment, plan[])
 */
router.post('/send-detailed-plan', async (req: Request, res: Response) => {
    const { userId, plan, splitName, splitComment } = req.body;

    if (!userId || !plan || !Array.isArray(plan)) {
        return res.status(400).json({ message: '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å userId, plan (array of days), splitName –∏ splitComment.' });
    }

    if (!splitName || typeof splitName !== 'string') {
        return res.status(400).json({ message: '–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å splitName (—Å—Ç—Ä–æ–∫–∞).' });
    }

    const validSplitComment = splitComment && typeof splitComment === 'string' ? splitComment : '';

    try {
        const messageHTML = formatWeeklyWorkoutMessageHTML(plan, splitName, splitComment);

        function capitalizeFirstLetter(str: string) {
            if (!str) return '';
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É-—Å—Å—ã–ª–∫—É –∫ –∫–∞–∂–¥–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É tg://open-web-app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App –≤–Ω—É—Ç—Ä–∏ Telegram
        let detailedMessage = '';
        plan.forEach(day => {
            if (day.exercises && day.exercises.length > 0) {
                detailedMessage += `<u>${escapeHTML(day.dayName)}</u>\n`;
                day.exercises.forEach((exercise: Exercise, index: number) => {
                    const externalUrl = `${appUrl}/landingsOutside/exerciseInChat?name=${encodeURIComponent(exercise.name)}`;
                    detailedMessage += `${index + 1}. ${escapeHTML(capitalizeFirstLetter(exercise.name))} ‚Äî ${exercise.sets}√ó${exercise.reps} <a href="${externalUrl}">üîó</a>\n`;
                });
                detailedMessage += `\n`;
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        detailedMessage += `<a href="https://t.me/freeload_top_bot">–±–æ—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏</a>\n`;
        detailedMessage += `<a href="https://t.me/training_health">—Ç–≥-–∫–∞–Ω–∞–ª ¬´–∫–û—á–∞–ª–∫–∞¬ª</a>\n`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, detailedMessage, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        });

        console.log(`–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        res.json({ message: '–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç' });
    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ Telegram:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ Telegram.', error: error.message });
    }
});


export default router;

