// src/bot.ts
import TelegramBot, {
    InlineKeyboardMarkup,
    InlineKeyboardButton,
} from 'node-telegram-bot-api';
import mongoose from 'mongoose';
import ScheduledSurvey from './models/ScheduledSurvey';
import User from './models/User'; // –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º surveyCallbacks

const botToken = process.env.TELEGRAM_BOT_API_KEY;
const appUrl = process.env.APP_URL;

if (!botToken) {
    throw new Error('TELEGRAM_BOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}
if (!appUrl) {
    throw new Error('APP_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}

const bot = new TelegramBot(botToken, { polling: true });
console.log('Telegram bot initialized');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Telegram Web App
 * @param text –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
 * @param path –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const openTelegramLink = (
    text: string,
    path: string
): InlineKeyboardButton => {
    return {
        text,
        web_app: { url: `${appUrl}${path}` },
    };
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL-–∫–Ω–æ–ø–∫–∏
 * @param text –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
 * @param url URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
 */
const openUrlButton = (text: string, url: string): InlineKeyboardButton => {
    return {
        text,
        url,
    };
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage =
        '–ü—Ä–∏–≤–µ—Ç!\n\n' +
        '–Ø –ø–æ–º–æ–≥—É –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω–æ–º –∑–∞–ª–µ –∏ —É–∑–Ω–∞—Ç—å –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ\n\n' +
        '1Ô∏è‚É£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n' +
        '2Ô∏è‚É£ –ö–ë–ñ–£ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ —Ä–∞—Ü–∏–æ–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n' +
        '3Ô∏è‚É£ –°–æ–≤–µ—Ç—ã –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –Ω–∞–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π';

    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                openTelegramLink('üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '/'),
                openTelegramLink('üçè –ü–∏—Ç–∞–Ω–∏–µ', '/nutrition'),
            ],
            [openUrlButton('üîó –¢–ì-–∫–∞–Ω–∞–ª ¬´–∫–û—á–∞–ª–∫–∞¬ª', 'https://t.me/training_health')],
            [openTelegramLink('‚≠ê –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '/landingsOutside/donatStars')],
        ],
    };

    bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
bot.on('callback_query', async (query) => {
    try {
        if (!query.data) return;

        // –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "SURVEY|surveyId|messageId|userChoice"
        const parts = query.data.split('|');
        console.log('++ parts', parts);
        if (parts.length < 4) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', query.data);
            return bot.answerCallbackQuery(query.id, {
                text: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.',
                show_alert: true,
            });
        }

        const [type, surveyId, messageId, userChoice] = parts;

        if (type === 'SURVEY') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö callback, –µ—Å–ª–∏ userChoice –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "q:answer:test:"
            if (userChoice.startsWith('q_')) {
                console.log(
                    `–ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π callback: surveyId=${surveyId}, messageId=${messageId}, userChoice=${userChoice}`
                );

                // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–±—ç–∫–æ–≤
                const user = await User.findOne({ telegramId: query.from.id });
                if (user) {
                    user.surveyCallbacks = user.surveyCallbacks || [];
                    user.surveyCallbacks.push({
                        surveyId,
                        messageId,
                        callbackAt: userChoice, // –∏—Å–ø–æ–ª—å–∑—É–µ–º callbackAt –≤–º–µ—Å—Ç–æ callbackData
                        answeredAt: new Date(),
                    });
                    await user.save();
                } else {
                    console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramId ${query.from.id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                }

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (message_id –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ)
                if (query.message && query.message.chat && query.message.message_id) {
                    await bot.deleteMessage(query.message.chat.id, query.message.message_id);
                }

                await bot.answerCallbackQuery(query.id, {
                    text: '–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!',
                    show_alert: false,
                });
                return;
            } else {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
                await saveSurveyAnswer(surveyId, messageId, query.from.id, userChoice);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                if (query.message && query.message.chat && query.message.message_id) {
                    await bot.deleteMessage(query.message.chat.id, query.message.message_id);
                }

                await bot.answerCallbackQuery(query.id, {
                    text: '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!',
                    show_alert: false,
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏)
                await processNextMessage(surveyId, messageId, query.from.id);
            }
        } else {
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback:', type);
            await bot.answerCallbackQuery(query.id, {
                text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.',
                show_alert: true,
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query:', error);
        if (query.id) {
            await bot.answerCallbackQuery(query.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    }
});

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ä–∞—Å—Å—ã–ª–∫–∏.
 */
async function saveSurveyAnswer(
    surveyId: string,
    messageId: string,
    telegramUserId: number,
    userChoice: string
) {
    try {
        const survey = await ScheduledSurvey.findById(surveyId);
        if (!survey) {
            console.error('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', surveyId);
            return;
        }
        if (!survey.answers) {
            survey.answers = [];
        }
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º messageId –≤ ObjectId, –µ—Å–ª–∏ —Å—Ö–µ–º–∞ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç
        survey.answers.push({
            messageId: new mongoose.Types.ObjectId(messageId),
            telegramUserId,
            userChoice,
            answeredAt: new Date(),
        });
        await survey.save();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.
 */
async function processNextMessage(
    surveyId: string,
    currentMessageId: string,
    telegramUserId: number
) {
    try {
        const survey = await ScheduledSurvey.findById(surveyId);
        if (!survey) {
            console.error(
                '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:',
                surveyId
            );
            return;
        }
        // –ï—Å–ª–∏ –ø–æ–ª–µ currentIndex –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ ‚Äì —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        let currentIndex = survey.currentIndex ?? -1;
        // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –µ–≥–æ _id (–ø—Ä–∏–≤–æ–¥–∏–º _id –∫ —Å—Ç—Ä–æ–∫–µ)
        const idx = survey.messages.findIndex(
            (msg: any) => msg._id.toString() === currentMessageId
        );
        if (idx === -1) {
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ –Ω–æ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:', currentMessageId);
            return;
        }

        if (survey.messages[idx].waitForResponse) {
            survey.currentIndex = idx + 1;
            await survey.save();

            if (survey.currentIndex < survey.messages.length) {
                const nextMessage = survey.messages[survey.currentIndex];
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                const keyboard = {
                    inline_keyboard: nextMessage.inlineButtons.map((btn: any) => [
                        {
                            text: btn.text,
                            // –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "SURVEY|surveyId|nextMessageId|btn.callbackData"
                            callback_data: `SURVEY|${surveyId}|${nextMessage._id}|${btn.callbackData}`,
                        },
                    ]),
                };
                console.log('+++ keyboard', keyboard)
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª –æ—Ç–≤–µ—Ç
                await bot.sendMessage(telegramUserId, nextMessage.text, {
                    reply_markup: keyboard,
                });
            } else {
                survey.completed = true;
                await survey.save();
            }
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ processNextMessage:', err);
    }
}

// –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ polling
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

export default bot;
