// src/bot.ts
import TelegramBot, { InlineKeyboardMarkup } from 'node-telegram-bot-api';

// –¢–æ–∫–µ–Ω –∏ URL –±–µ—Ä–µ–º –∏–∑ process.env, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω—ã –≤ server.ts
const botToken = process.env.TELEGRAM_BOT_API_KEY;
const appUrl = process.env.APP_URL;

if (!botToken) {
    throw new Error('TELEGRAM_BOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}
if (!appUrl) {
    throw new Error('APP_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
}

const bot = new TelegramBot(botToken, {
    polling: true,
});

console.log('Telegram bot initialized');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Telegram Web App
 * @param text –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
 * @param path –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/training' –∏–ª–∏ '/nutrition')
 * @returns –ö–Ω–æ–ø–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º web_app
 */
const openTelegramLink = (text: string, path: string): any => {
    return {
        text,
        web_app: {
            url: `${appUrl}${path}`,
        },
    };
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL-–∫–Ω–æ–ø–∫–∏
 * @param text –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
 * @param url URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
 * @returns –ö–Ω–æ–ø–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º url
 */
const openUrlButton = (text: string, url: string): any => {
    return {
        text,
        url,
    };
};

// /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    const welcomeMessage = '–ü—Ä–∏–≤–µ—Ç!\n\n' +
        '–Ø –ø–æ–º–æ–≥—É –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω–æ–º –∑–∞–ª–µ –∏ —É–∑–Ω–∞—Ç—å –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ\n\n' +
        '1Ô∏è‚É£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n' +
        '2Ô∏è‚É£ –ö–ë–ñ–£ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ —Ä–∞—Ü–∏–æ–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n' +
        '3Ô∏è‚É£ –°–æ–≤–µ—Ç—ã –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –Ω–∞–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π';

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
            [
                openTelegramLink('üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '/'),
                openTelegramLink('üçè –ü–∏—Ç–∞–Ω–∏–µ', '/nutrition'),
            ],
            [
                openUrlButton('üîó –¢–ì-–∫–∞–Ω–∞–ª ¬´–∫–û—á–∞–ª–∫–∞¬ª', 'https://t.me/training_health'),
            ],
            [
                openTelegramLink('‚≠ê –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '/landingsOutside/donatStars'),
            ],
        ],
    };

    bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: keyboard,
    });
});

// –ü—Ä–∏–º–µ—Ä callback_data = "SURVEY|<surveyId>|<messageId>|<callbackData>"
bot.on('callback_query', async (query) => {
    if (!query.data) return;
    const parts = query.data.split('|');
    if (parts[0] === 'SURVEY') {
        const surveyId = parts[1];
        const messageId = parts[2];
        const userChoice = parts[3];

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç ...
        await saveSurveyAnswer(surveyId, messageId, query.from.id, userChoice);

        bot.answerCallbackQuery(query.id, {
            text: '–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!',
            show_alert: false,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processNextMessage(surveyId, messageId);
    }
});

async function saveSurveyAnswer(
    surveyId: string,
    messageId: string,
    telegramId: number,
    userChoice: string,
) {
    // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (ScheduledSurvey –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)
}

async function processNextMessage(surveyId: string, messageId: string) {
    // –Ω–∞–π—Ç–∏ survey, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π index,
    // –µ—Å–ª–∏ waitForResponse, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∏ —Ç.–¥.
}

// –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏
bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤ server.ts –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å bot
export default bot;
