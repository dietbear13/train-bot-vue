// stores/wallStore.ts
import { defineStore } from 'pinia';
import { useApi } from '~/composables/useApi';

interface TrainingItem {
    _id: string;
    timestamp: number;
    isSended?: boolean;
    likes?: number;
    plan?: any[];
    formData?: {
        goal?: string;
        splitType?: string;
        comment?: string;
        // ... –ª—é–±—ã–µ –ø–æ–ª—è
    };
    telegramId?: number; // —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –æ—Ç –∫–æ–≥–æ
}

interface CachedWallData {
    data: TrainingItem[];
    timestamp: number;
}

export const useWallStore = defineStore('wall', {
    state: () => ({
        workouts: [] as TrainingItem[], // —Ö—Ä–∞–Ω–∏–º –≤—Å–µ isSended=true —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        timestamp: 0, // –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è
    }),

    actions: {
        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω).
         */
        isCacheValid(timestamp: number | null, maxAgeMs = 10 * 60 * 1000) {
            if (!timestamp) return false;
            return Date.now() - timestamp < maxAgeMs;
        },

        /**
         * –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (wallWorkoutsCache).
         */
        loadCache() {
            const localData = localStorage.getItem('wallWorkoutsCache');
            if (localData) {
                const parsed: CachedWallData = JSON.parse(localData);
                this.workouts = parsed.data;
                this.timestamp = parsed.timestamp;
            }
        },

        /**
         * –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (wallWorkoutsCache).
         */
        saveCache() {
            const payload: CachedWallData = {
                data: this.workouts,
                timestamp: Date.now(),
            };
            localStorage.setItem('wallWorkoutsCache', JSON.stringify(payload));
        },

        /**
         * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ /users,
         * —Å–æ–±–∏—Ä–∞–µ–º —É –∫–∞–∂–¥–æ–≥–æ user.trainingHistory —Å isSended=true,
         * —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ this.workouts, –∫—ç—à–∏—Ä—É–µ–º.
         */
        async fetchWorkouts() {
            console.log('üíæ [wallStore] –ù–∞—á–∞–ª–æ fetchWorkouts()');
            this.loadCache();

            // 1) –ï—Å–ª–∏ –∫—ç—à —Å–≤–µ–∂–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (this.workouts.length > 0 && this.isCacheValid(this.timestamp)) {
                return;
            }
            console.log('‚õî –ö—ç—à –ø—É—Å—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º /users');

            // 2) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä—è–º–æ –∏–∑ API (—á–µ—Ä–µ–∑ useApi).
            const { apiRequest } = useApi();
            let allUsers: any[] = [];
            try {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—ë—Ç –º–∞—Å—Å–∏–≤ (–∏–ª–∏ –æ–±—ä–µ–∫—Ç { users: [...] }),
                // —Å–º. –Ω–∏–∂–µ, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                const response = await apiRequest<any>('GET', 'users');
                // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç { users: [...] }
                if (Array.isArray(response)) {
                    allUsers = response;
                } else if (Array.isArray(response.users)) {
                    allUsers = response.users;
                } else {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç /users');
                }
            } catch (err) {
                console.error('‚ùå [wallStore] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ /users:', err);
                return;
            }

            // 3) –ò–∑ –∫–∞–∂–¥–æ–≥–æ —é–∑–µ—Ä–∞ –±–µ—Ä—ë–º .trainingHistory, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ isSended=true.
            const allSended: TrainingItem[] = allUsers.flatMap((user: any) => {
                const { telegramId } = user;
                return (user.trainingHistory || [])
                    .filter((w: any) => w.isSended === true)
                    .map((w: TrainingItem) => {
                        w.telegramId = telegramId;
                        return w;
                    });
            });

            // 4) –ó–∞–ø–æ–ª–Ω—è–µ–º –≤ store
            this.workouts = allSended;
            this.timestamp = Date.now();
            this.saveCache();

        },

        /**
         * –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ –ª–∞–π–∫–∞. –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ WallMain.vue
         */
        handleLike(workoutId: string) {
            console.log(`[wallStore] –õ–∞–π–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${workoutId}`);
            // –û–±—ã—á–Ω—ã–π PUT/POST –∑–∞–ø—Ä–æ—Å, –ª–∏–±–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ this.workouts
            // ...
        },

        /**
         * –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ.
         */
        handleSave(workoutId: string) {
            console.log(`[wallStore] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${workoutId}`);
            // ...
        },
    },
});
